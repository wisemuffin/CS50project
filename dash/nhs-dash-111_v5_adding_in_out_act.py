# -*- coding: utf-8 -*-
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

import plotly.graph_objs as go

import pandas as pd
import numpy as np

''' Start : NHS 111 Data prep '''

# Data manipulation
url = 'https://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/2017/12/NHS-111-MDS-time-series-to-2017-November-v2.xlsx'
df = pd.read_excel(url, sheet_name='Raw', skiprows=5, header=0, )#, sheet_name='All Attendances - Male', skiprows=3, header=0)
df.rename(columns={'Unnamed: 0':'Concat', 'Unnamed: 1':'Region', 'Unnamed: 2':'Provider Code', 'Unnamed: 3':'Date', 'Unnamed: 4':'Code', 'Unnamed: 5':'Area'}, inplace=True)

metric_options = ['Population', 'Total calls offered', 'No calls answered', 'Calls answered within 60 secs','Ambulance dispatches']
dimension_options = ['Area','Region','Provider Code']
# Future development: Could allow users to select metrics
metric_options_selected = metric_options

# Interactive variables
dimension_picker = dimension_options[0]
dimension_element_picker = df[dimension_picker][0]


# Data transformation
df_filtered = df[df[dimension_picker] == dimension_element_picker]
# df_filtered = df
df_grouped = df_filtered.groupby(by=[dimension_picker,'Date'], as_index=False).sum()

''' End : NHS 111 Data prep '''

''' Start : NHS Hospital Outpatient Activity data prep '''

url = 'https://digital.nhs.uk/media/34230/Hospital-Outpatient-Activity-2016-17-All-attendances/default/hosp-epis-stat-outp-all-atte-2016-17-tab.xls'
df_male = pd.read_excel(url, sheet_name='All Attendances - Male', skiprows=3, header=0)#names=("code", "provider_desc", "male", "female", "unkown", "total"))
df_female = pd.read_excel(url, sheet_name='All Attendances - Female', skiprows=3, header=0)#names=("code", "provider_desc", "male", "female", "unkown", "total"))

# Append the two data frames to one and other
df_male["Gender"] = "Male"
df_female["Gender"] = "Female"
df_out_act= pd.concat([df_male, df_female])

# unpivot the age columns
df_out_act= df_out_act.melt(id_vars=["Main Specialty Code", "Main Specialty Code Description","Gender"])
df_out_act.rename(columns={'variable':'Age Group'},inplace=True)
df_out_act['Age Group'] = df_out_act['Age Group'].astype('str')

# remove total columns
df_out_act= df_out_act[df_out_act["Main Specialty Code Description"] != "Total"]
df_out_act= df_out_act[df_out_act["Age Group"] != "Total"]
df_out_act.head(3)

# Define the sorter
sorter = ['0', '1-4', '5-9', '10-14', '15', '16', '17', '18', '19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', '65-69', '70-74', '75-79', '80-84', '85-89', '90-120', 'Unknown']

# Create the dictionary that defines the order for sorting
sorterIndex = dict(zip(sorter,range(len(sorter))))

# Generate a rank column that will be used to sort
# the dataframe numerically
df_out_act['Age Group Rank'] = df_out_act['Age Group'].map(sorterIndex)

df_out_act.sort_values('Age Group Rank', inplace = True)
# df_out_act.drop('Age Group Rank', inplace = True)

# Clean up the data types
df_out_act["Age Group"] = df_out_act["Age Group"].astype("category")
df_out_act["Gender"] = df_out_act["Gender"].astype("category")

# Set up summarised code for Body Systems
divisions = pd.read_excel('divisions of clinical work.xlsx')
divisions.rename(columns={'Code': 'Main Specialty Code', 'Main Specialty Title': 'Main Specialty Code Description'}, inplace=True)
divisions.drop(columns='Main Specialty Code Description', inplace=True)
df_out_act= df_out_act.merge(divisions, how='left', on='Main Specialty Code')

# Set up group by
dimension = {'Divisions of clinical work': df_out_act["Divisions of clinical work"].unique(),'Gender': df_out_act['Gender'].unique()}
dimension_out_act_options = ['Gender', 'Divisions of clinical work']
dimension_out_act_picker = dimension_out_act_options[0]
df_out_act_grouped = df_out_act.groupby(by=[dimension_out_act_picker,'Age Group','Age Group Rank'], as_index=False).sum()
df_out_act_grouped.dropna(inplace=True)

''' Emd : NHS Hospital Outpatient Activity data prep '''

app = dash.Dash()
app.config['suppress_callback_exceptions']=True # used when assigning callbacks to components that are generated by other callbacks (and therefore not in the initial layout), then you can suppress this exception by setting

# Choose the CSS styly you like
app.css.append_css({"external_url": "https://codepen.io/chriddyp/pen/bWLwgP.css"})

markdown_text = '''
### Dash and Markdown

Dash apps can be written in Markdown.
Dash uses the [CommonMark](http://commonmark.org/)
specification of Markdown.
Check out their [60 Second Markdown Tutorial](http://commonmark.org/help/)
if this is your first introduction to Markdown!
'''

app.layout = html.Div(children=[
    html.H1(children='NHS analysis'),

    html.Div(children='''
        Powered by Dash: A web application framework for Python.
    '''),

    dcc.Markdown(children=markdown_text),

    # tabs to navigate between analysis
    dcc.Tabs(
        tabs=[
            {'label': 'Tab {}'.format(i), 'value': i} for i in range(1, 5)
        ],
        value=1,
        id='tabs'
    ),
    # call backs will modify this tab-output depending on which tab is selected
    html.Div(id='tab-output'),


    # # navigation buttons
    # html.Div(
    #     [
    #         html.Button('Back', id='back', style={
    #                     'display': 'inline-block'}),
    #         html.Button('Next', id='next', style={
    #                     'display': 'inline-block'})
    #     ],
    #     className='two columns offset-by-two'
    # )





])

"""
START : Tab tab-output
"""

@app.callback(
    Output(component_id='tab-output',  component_property='children'),
    [Input(component_id='tabs', component_property='value')]
)
def set_tab_to_display(tab):
    if tab == 1:
        tab_display = html.Div(children=[

            html.Div(children=[

                # dropdown to select the dimension
                html.Div(dcc.Dropdown(
                    id = 'dimension_dropdown',
                    options=[
                        dict(label = dimension_options[i],value = dimension_options[i]) for i in range (0, len(dimension_options))
                    ],
                    value = dimension_options[0],
                    #style={'width': '48%'}
                ), style={'width': '10%', 'display': 'inline-block'}),

                # dropdown of chilren of the selected dimension
                html.Div(dcc.Dropdown(
                    id = 'dimension_element_dropdown',
                    #style={'width': '48%', 'float': 'right', 'display': 'inline-block'}
                    ), style={'width': '20%', 'display': 'inline-block'})

            ],
            style={'padding': '10px'}
            ),

            dcc.Graph(id='nhs-111-graph-bar')


        ])
    elif tab == 2:
        tab_display = html.Div(children=[
            html.H1(children='in progress at the mo'),

            html.Div(children=[
                html.Div(
                    html.Button(dimension_out_act_options[0], id='button_2_out_act'),
                    style={'width': '10%', 'display': 'inline-block'}
                    ),
                html.Div(
                    html.Button(dimension_out_act_options[1], id='button_2_out_act'),
                    style={'width': '10%', 'display': 'inline-block'}
                    )
            ],
            style={'padding': '5px'}
            )
            ])


    else:
        tab_display = html.Div(children=[
            html.H1(children='in progress'),
            # html.Img(
            #     # src="https://www.google.com.au/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwjVrOPeoOXYAhUEn5QKHZvnAPAQjRwIBw&url=http%3A%2F%2Ftrafficnetworkads-team.com%2Fmemes%2Finternet-is-broken-meme.php&psig=AOvVaw05j9i8hngazeAGmxF3R8fN&ust=1516493375312979",
            #     # className='two columns',
            #     # style={
            #     #     'height': '60',
            #     #     'width': '160',
            #     #     'float': 'left',
            #     #     'position': 'relative',
            #     # },
            # ),
        ])
    return tab_display

"""
START : NHS_out_act_tab-output
"""
# @app.callback(
#     Output(component_id='nhs-out-act-graph-bar', component_property='figure'),
#     [Input(component_id='dimension_dropdown', component_property='value'),
#     Input(component_id='dimension_element_dropdown', component_property='value')]
# )
# def update_graph(dimension_picker, dimension_element_picker):

"""
END : NHS_out_act_tab-output
"""

"""
START : NHS_111_tab-output
"""

# sets the children of dimension_element_dropdown
@app.callback(
    Output(component_id='dimension_element_dropdown', component_property='options'),
    [Input(component_id='dimension_dropdown', component_property='value')]
)
def set_dimension_elements(dimension_picker):
    options = df[dimension_picker].unique()
    options = [{'label': i, 'value': i} for i in options]
    options.insert(0, {'label': 'All', 'value': 'All'})
    return options

# sets the initial value in the dimension_element_dropdown when the dimension_dropdown dropdown changes i.e. chaning the dimension.
@app.callback(
    Output(component_id='dimension_element_dropdown', component_property='value'),
    [Input(component_id='dimension_element_dropdown', component_property='options')]
)
def set_display_children(available_options):
    return available_options[0]['value']


@app.callback(
    Output(component_id='nhs-111-graph-bar', component_property='figure'),
    [Input(component_id='dimension_dropdown', component_property='value'),
    Input(component_id='dimension_element_dropdown', component_property='value')]
)
def update_graph(dimension_picker, dimension_element_picker):
    # if all is selected in the dimension_element_picker then do not include a dimension in the group by clause
    if dimension_element_picker == 'All':
        df_grouped = df.groupby(by=['Date'], as_index=False).sum()
    else:
        df_filtered = df[df[dimension_picker] == dimension_element_picker]
        df_grouped = df_filtered.groupby(by=[dimension_picker,'Date'], as_index=False).sum()

    # Future development: Could allow users to select metrics
    metric_options_selected = metric_options

    return {
        # use the DataFrame columns for generating data
        'data' : [go.Scatter(
            x = df_grouped['Date'],
            y = df_grouped[metric_options_selected[i]],
            mode = 'lines',
            name = metric_options_selected[i],
    #         text = df_grouped[metric_options_selected[i]],
            opacity = 0.8,
        ) for i in range(0, len(metric_options_selected))], # loop through traces

        # plot titles and axis labels
        'layout' : go.Layout(
            barmode='group',#'group', # switch between stack and group
            title='<b>NHS 111 calls where  </b>'+ dimension_picker+' = '+dimension_element_picker,
            yaxis = dict(
                type = 'log', # switches to a logarythmic scale
                title='<i>Volume</i>'
            ),
    #         xaxis=dict(
    #             title='<i>Date</i>'
    #         )
        )
    }

"""
END: NHS_111_tab-output
"""



if __name__ == '__main__':
    app.run_server(debug=True)
